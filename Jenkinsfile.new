pipeline {
    agent { label 'master' }
    
    environment {
        DOCKER_IMAGE = 'flask-app'
        DOCKER_TAG = 'latest'
        DOCKER_REPO = 'tu-repositorio' // Cambia esto por tu repositorio
        CONTAINER_NAME = 'flask-test-container'
    }
    
    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Construir la imagen
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }
        
        stage('Run Container') {
            steps {
                script {
                    // Ejecutar el contenedor
                    sh "docker run -d --name ${CONTAINER_NAME} -p 5000:5000 ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    // Esperar a que el contenedor esté completamente iniciado
                    sh 'sleep 10'
                    
                    // Obtener la IP del contenedor
                   def containerIP = sh(
                        script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME}",
                        returnStdout: true
                    ).trim()
                    
                    // Verificar que el servicio está respondiendo usando la IP del contenedor
                    sh "nc -zv ${containerIP} 5000"
                    
                }
            }
        }
        
      
        
      //  stage('Push to Repository') {
      //     steps {
      //         script {
      //             // Etiquetar y subir la imagen al repositorio
      //             sh """
      //                 docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}
      //                 docker push ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}
      //             """
      //         }
      //     }
     //   } # Fin Stage
    }
    
    post {
        always {
            script {
                // Limpiar: detener y eliminar el contenedor
                sh """
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                """
            }
        }
    }
}
